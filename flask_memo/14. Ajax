

@ 서버 측 vs 클라이언트 측
    - 서버 측 모델에는 애플리케이션 서버에 HTTP 요청을 하는 클라이언트(사용자가 명령하는 웹 브라우저)가 있다
    - 보통의 경우 클라이언트는 서버에 요청을 발행하고 서버는 웹 페이지로 응답.
    - 모든 페이지 데이터가 HTML이 아니며 일반적으로 Javascript로 작성된 코드가 있는 페이지 섹션도 있음
    - 클라이언트가 페이지를 수신하면 HTML 부분을 표시하고 코드를 실행.
    - 그때부터 서버와 거의 또는 전혀 접촉하지 않고도 자체적으로 작업을 수행 할 수 있는 활성 클라이언트가 있다.
    - 엄격한 클라이언트 측 응용 프로그램에서 전체 응용 프로그램은 초기 페이지 요청과 함께 클라이언트에 다운로드되고 
        응용 프로그램은 완전히 클라이언트에서 실행되며 서버에 연결하여데이터를 검색하거나 저장하고 첫 번째 모양을 동적으로 변경.

@ Ajax
    - 클라이언트가 더 적극적인 역할을 하는 모델
    - 사용자 게시물의 실시간 번역을 수행하기 위해 클라이언트 브라우저는 서버가 페이지를 새로 고치치 않고 응답하는 비동기 요청을 서버에 보낸다.
    - 그런 다음 클라이언트는 번역을 현재 페이지에 동적으로 삽입한다.
    


@ Ajax 메소드
    $.ajax()      - 비동기식 Ajax를 이용하여 HTTP 요청을 전송함.
    $.get()       - 전달받은 주소로 GET 방식의 HTTP 요청을 전송함.
    $.post()      - 전달받은 주소로 POST 방식의 HTTP 요청을 전송함.
    $.getScript() - 웹 페이지에 스크립트를 추가함.
    $.getJSON()   - 전달받은 주소로 GET 방식의 HTTP 요청을 전송하여, 응답으로 JSON 파일을 전송받음.
    .load()       -서버에서 데이터를 읽은 후, 읽어 들인 HTML 코드를 선택한 요소에 배치함.

@ 메소드 체이닝(method chaining)
    - doneHTTP 요청이 성공하면 요청한 데이터가 done() 메소드로 전달된다.
    - failHTTP 요청이 실패하면 오류와 상태에 관한 정보가 fail() 메소드로 전달된다.
    - alwaysHTTP 요청이 성공하거나 실패하는 것에 상관없이 언제나 always() 메소드가 실행된다.


https://araikuma.tistory.com/640


