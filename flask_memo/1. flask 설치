## flask 설치하기

**진행할 프로젝트 안에 가상환경 구축 
1. 프로젝트 폴더 생성 
	$ mkdir project
2. 프로젝트 내에 가상 환경 만들기
	 $ python3 -m venv venv(가상환경이름)
3. 환경활성화하기 
 - 프로젝트에서 작업하기 전에 해당 환경을 활성화 (활성화된 상태에서 작업해야됨 )
	 $ . venv/bin/activate
4. Flaks 설치
- 활성화 된 환경 내에서 Flask 설치
	$ pip install Flask


**가상환경 종료 명령어 : deactivate(비활성화)

	
	Project
		-flask 
		 	-가상환경 만들기 ($ python -m venv flask)
		 	-가상환경 안에서 설치 
		 	$ flask/bin/pip install flask
			$ flask/bin/pip install flask-login
			$ flask/bin/pip install flask-openid
			$ flask/bin/pip install flask-mail
			$ flask/bin/pip install flask-sqlalchemy
			$ flask/bin/pip install sqlalchemy-migrate
			$ flask/bin/pip install flask-whooshalchemy
			$ flask/bin/pip install flask-wtf
			$ flask/bin/pip install flask-babel
			$ flask/bin/pip install guess_language
			$ flask/bin/pip install flipflop
			$ flask/bin/pip install coverage
			



@ 환경 변수 설정하여 Flask 가져 오는 방법

(venv) $ export FLASK_APP=microblog.py
(venv) $ flask run
 * Serving Flask app "microblog"
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)

 *** 새 터미널 창을 열 때마다 환경 변수를 설정해야함 -> flask 명령을 실행할 때 자동으로 가져 오려는 환경변수 등록하기
 	* python-dotenv 패키지 설치
 	(venv) $ pip install python-dotenv
 	* .flaskenv 파일에 환경 변수 설정하기 (프로젝트의 최상위 디렉토리에 만들기)
 		FLASK_APP=microblog.py  -> 어플리케이션 실행 

 		FLASK_ENV=development   -> Environment: development로 설정 (총 3가지 환경이 있음 - development, test, production)              -> 먼저 export 해주고 나서 설정하기 
https://wikidocs.net/81074



@@@@ .flaskenv , .env    -> 프로젝트 최상위 디렉토리에 위치 
	* .flaskenv 
		- falsk 관련된 환경변수 설정
	* .env
		- 그 외? 일반적인? 환경변수 설정