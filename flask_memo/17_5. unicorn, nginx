
@ Gunicorn (Green Unicorn)
	- 순수한 Python WSGI HTTP웹 서버
	- 빠르고 가볍고, 간단하다.
	- Nginx와 함께 사용하도록 권장함.
	- 8000번 포트로 구동되고 의존성이 없으며, Nginx는 일반적으로 리버스 프록시 서버로 사용됨.

	- flask run을 사용하여 서버를 실행할 때 Flask와 함께 제공되는 웹 서버를 사용하는 것.

https://velog.io/@yvvyoon/flask-nginx-gunicorn-1

* 리버스 프록시 ?
	- 클라이언트가 example.com 웹 서비스에 데이터를 요청하면
	  리버스 프록시는 이 요청을 받아서 내부 서버에서 데이터를 받은 후에 이 데이터를 클라이언트에 전달하게 됨.
	  	-> 다수의 서버가 존재하고 매 요청 발생 시 어떤 서버에게 요청을 처리할지 지시하는 역할

	  https://brainbackdoor.tistory.com/113

@ gunicorn에서 mircovblog 앱 실행하기
	(venv) $ gunicorn -b localhost:8000 -w 4 microblog:app
	 
	 - -b 옵션 : gunicorn에 요청을 수신할 위치를 알려줌
	 		    요청은 포츠 8000에서 내부 네트워크 인터페이스로 설정.
	 		- 클라이언트의 모든 요청을 수락하는 정적 파일을 직접 제공하고 응용 프로그램에 대한 요청을 내부 서버로 전달.
	 - w 옵션 : gunicorn이 실행할 작업자 수를 구성.
	 			작업자가 4개이면 애플리케이션이 최대 4개의 클라이언트르 동시에 처리 할 수 있음.
	 - microblog:app : 인수는 응용 프로그램 인스턴스를 로드하는 방법을 gunicorn에 알려준다. 
	 					애플리케이션을 포함하는 모듈이름 :애플리케이션의 이름


	 *** 모니터링 할 프로그램과 필요할 때 다시 시작하는 방법을 알려주는 구성 파일 사용하기.
	 	- 구성 파일은 /etc/supervisor/conf.d에 저장되어야 함.
	 	* microblog.conf 를 호출 할 Microblog의 구성 파일

		 	[program:microblog]
			command=/home/ubuntu/microblog/venv/bin/gunicorn -b localhost:8000 -w 4 microblog:app
			directory=/home/ubuntu/microblog
			user=ubuntu
			autostart=true   # 서버 끊기게 되면 자동으로 시작됨
			autorestart=true # 서버가 어떠한 오류로 끊기게 되면 자동으로 다시 시작됨  
			stopasgroup=true # 여러개 설정한 command를 group으로 묶어서 실행 -> 다 실행 중지
			killasgroup=true # 그룹으로 kill 하기


			- command, directory, user : 수퍼바이저에게 애플리케이션 실행 방법을 알려줌
			- autostart, autorestart 	  : 컴퓨터 시작 또는 충돌로 인해 자동 다시 시작을 설정
			stopasgroup, killasgroup   : 수퍼바이저가 애플리케이션을 다시 시작하기 위해 중지해야할 때 
											 최상위 gunicorn 프로세스 하위 프로세스에 도할하도록함.



      	- 구성 파일 작성한 후 가져오려면 supervisor 서비스를 다시 로드해야함 
      		$ sudo supervisorctl reload

		* gunicorn 구동되는지 확인
			$ ps aux | grep gunicorn
				** ps aux, top ==    windows task manager 
						



@ Nginx 설정
	* nginx
	- 정적 파일을 처리하는 HTTP 서버로서의 역할
	- 기존 웹서버에서 많은 트래픽을 감당하기 위해서 확정성을 가지고 설계된 비동기 이벤트 드라이븐 방식의 웹서버를 칭함.
	- 응용프로그램 서버에 요청을 보내는 리버스 프록시로서의 역할


	@ SSL(Secure Sockets Layer) 인증서 만들기
		* SSL
		- 인터넷을 할 때 왔다갔다 하는 내용을 암호화 해주는 프로토콜.

		* SSL 인증서 만들기
			$ mkdir certs  

			(venv) ahope@ubuntu:~/microblog$ openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
			>   -keyout certs/key.pem -out certs/cert.pem
			Generating a RSA private key
			.................................................................................................................++++
			.......................................................................................................................................................................++++
			writing new private key to 'certs/key.pem'
			-----
			You are about to be asked to enter information that will be incorporated
			into your certificate request.
			What you are about to enter is what is called a Distinguished Name or a DN.
			There are quite a few fields but you can leave some blank
			For some fields there will be a default value,
			If you enter '.', the field will be left blank.
			-----
			Country Name (2 letter code) [AU]:

			-> microblog 하위 디렉토리에 key.pem , cert.pem 파일 생성 

	@ nginx에 웹 사이트 제공하기
		* 해당 웹 사이트에 대한 구성 파일 작성



		* 재시작
		$ sudo nginx -t

		ahope@ubuntu:~/microblog$ sudo nginx -t
		nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
		nginx: configuration file /etc/nginx/nginx.conf test is successful
		ahope@ubuntu:~/microblog$ 


		// 재시작은 아래에 있는 명령어 중 하나로 실행하시면 됩니다.
		$ sudo service nginx restart
		$ sudo systemctl restart nginx
		$ sudo /etc/init.d/nginx restart


@ 실행하기
(브라우저에서)
172.16.3.101 (연결한 vm ip번호)

(curl을 이용해 HTML 주소 받아오기 
curl localhost:8000







환경설정
https://opentutorials.org/module/384/4526

https://kscory.com/dev/nginx/install
https://real-dongsoo7.tistory.com/100
https://whatisthenext.tistory.com/123



@  Supervisord 사용법
http://www.kwangsik Supervisord 사용법lee.com/2018/12/supervisord-%EC%82%AC%EC%9A%A9%EB%B2%95%EC%9D%84-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90/

@ http의 기본 포트가 80, https의 기본 포트가 443인 이유는 무엇일까?
https://johngrib.github.io/wiki/why-http-80-https-443/