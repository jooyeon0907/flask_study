
@ 디버그 모드
(venv) $ export FLASK_DEBUG=1



@ 사용자 정의 오류 페이지
	* @errorhandler 데코레이터 사용
	- 해당 템플릿의 내용에 대한 오류 반환 

	* 오류페이지 만들기 404.html , 500.html
	* app/__init__.py 에 오류 핸들러 가져오
		from app import routes, models, errors # 오류 핸들러 가져오기 
		오류 처리기를 Flask에 등록하려면 애플리케이션 인스턴스가 생성 된 후 새 app/errors.py 모듈을 가져와야한다.

	* 


@ 오류 기록 
1. SMTP 디버깅 서버를 사용하기
	** 디버그 OFF 상태여야됨  -> export FLASK_DEBUG=false
	(venv) $ MAIL_SERVER=localhost MAIL_PORT=8025 
	(venv) $ flask run

	* 다른 터널에 서버 실행 
	(venv) $ python -m smtpd -n -c DebuggingServer localhost:8025
	 ->오류 발생시 , 이메일을 보내는 대신 콘솔에 출력해줌 

1-2. 이메일 오류 발송
	* config.env에 작성
	 	MAIL_SERVER=smtp.googlemail.com
		MAIL_PORT=587
		MAIL_USE_TLS=1
		MAIL_USERNAME=<your-gmail-username>
		MAIL_PASSWORD=<your-gmail-password>

	* Gmail 게정에 대한 "보안 수준이 낮은 앱" 액세스를 명시적으로 허용해서 테스트용으로 보내보기 
	

2. 파일에 로깅하기 



@@ 로그레벨 
TRACE > DEBUG > INFO > WARN > ERROR > FATAL 
# Log Level
# TRACE : 추적 레벨은 Debug보다 좀더 상세한 정보를 나타냄
# DEBUG : 프로그램을 디버깅하기 위한 정보 지정
# INFO :  상태변경과 같은 정보성 메시지를 나타냄 
# WARN :  처리 가능한 문제, 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지를 나타냄 
# ERROR :  요청을 처리하는 중 문제가 발생한 경우
# FATAL :  아주 심각한 에러가 발생한 상태, 시스템적으로 심각한 문제가 발생해서 어플리케이션 작동이 불가능할 경우

https://hamait.tistory.com/880


@ 중복된 사용자 이름 버그 수정